git init
vi hello.txt
git add file.txt
git commit -a -m "first commit"
git status -s
git config --global http.proxy web-proxy.xxx.xxxcorp.net:8080
# call remote as 'origin'
git remote add origin https://github.com/ceradoe/GitFeb2019.git

#push content of master to origin( i.e remote)
git push origin master

PS C:\lab> git config --global user.name "john doe"
PS C:\lab> git config --global  user.email john.doe@gmail.com
PS C:\lab> git log --pretty=format:"%h %ad|%s%d %an" --date=short
PS C:\lab> git tag v1.0
=======

=================================
PS C:\lab> git tag v1.0
PS C:\lab> git log --pretty=format:"%h %ad|%s%d %an" --date=short
f9f165b 2019-02-26|added comment (HEAD -> master, tag: v1.0, origin/master) john doe
8a1f452 2019-02-26|next commit john doe
e51911f 2019-02-26|git commands Pandey
32d45b5 2019-02-26|second commit Pandey
4504238 2019-02-26|first commit Pandey
PS C:\lab> git checkout e51911f
error: Your local changes to the following files would be overwritten by checkout:
        hello.txt
Please commit your changes or stash them before you switch branches.
Aborting
PS C:\lab> git commit -a -m "new commit"
[master e664cc8] new commit
 1 file changed, 3 insertions(+), 1 deletion(-)
PS C:\lab> git checkout e51911f
Note: checking out 'e51911f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch-name>

HEAD is now at e51911f git commands
PS C:\lab> git tag v1.01
PS C:\lab> git log --pretty=format:"%h %ad|%s%d %an" --date=short
e51911f 2019-02-26|git commands (HEAD, tag: v1.01) Pandey
32d45b5 2019-02-26|second commit Pandey
4504238 2019-02-26|first commit Pandey
PS C:\lab> git checkout v1.0
Previous HEAD position was e51911f git commands
HEAD is now at f9f165b added comment
PS C:\lab> git log --pretty=format:"%h %ad|%s%d %an" --date=short
f9f165b 2019-02-26|added comment (HEAD, tag: v1.0, origin/master) john doe
8a1f452 2019-02-26|next commit john doe
e51911f 2019-02-26|git commands (tag: v1.01) Pandey
32d45b5 2019-02-26|second commit Pandey
4504238 2019-02-26|first commit Pandey
PS C:\lab>
========================================================
PS C:\lab> to unstage---->
PS C:\lab> git reset HEAD .\hello.txt
Unstaged changes after reset:
M       hello.txt
PS C:\lab>
=======================REVERT=================================
PS C:\lab> git commit -a -m "trial commit"
[detached HEAD 11d9dd3] trial commit
 1 file changed, 7 insertions(+), 1 deletion(-)
PS C:\lab> git log --pretty=format:"%h %ad|%s%d %an" --date=short
11d9dd3 2019-02-26|trial commit (HEAD) john doe
0f38cb3 2019-02-26|unstage john doe
eaa742b 2019-02-26|added text on tags john doe
f9f165b 2019-02-26|added comment (tag: v1.0) john doe
8a1f452 2019-02-26|next commit john doe
e51911f 2019-02-26|git commands (tag: v1.01) Pandey
32d45b5 2019-02-26|second commit Pandey
4504238 2019-02-26|first commit Pandey
PS C:\lab> git revert HEAD
[detached HEAD 55f2b9d] Revert "trial commit"
 1 file changed, 1 insertion(+), 7 deletions(-)
PS C:\lab> git log --pretty=format:"%h %ad|%s%d %an" --date=short
55f2b9d 2019-02-26|Revert "trial commit" (HEAD) john doe
11d9dd3 2019-02-26|trial commit john doe
0f38cb3 2019-02-26|unstage john doe
eaa742b 2019-02-26|added text on tags john doe
f9f165b 2019-02-26|added comment (tag: v1.0) john doe
8a1f452 2019-02-26|next commit john doe
e51911f 2019-02-26|git commands (tag: v1.01) Pandey
32d45b5 2019-02-26|second commit Pandey
4504238 2019-02-26|first commit Pandey
PS C:\lab>
====================================================================

